class Solution {
public:
    int countWays(string s1, string s2) {
        const int MOD = 1e9 + 7;
        int n = s1.size();
        int m = s2.size();

        // DP table with dimensions (n+1) x (m+1)
        vector<vector<long long>> dp(n + 1, vector<long long>(m + 1, 0));

        // Initialization: dp[i][0] = 1 for all i (empty string case)
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }

        // Fill the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1[i - 1] == s2[j - 1]) {
                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % MOD;
                } else {
                    dp[i][j] = dp[i - 1][j] % MOD;
                }
            }
        }

        // The result is in dp[n][m]
        return dp[n][m];
    }
};
