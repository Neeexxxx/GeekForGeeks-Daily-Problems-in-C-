class Solution {
public:
    int ans = 0;

    //Function to perform depth-first search and count the number of edges to be removed.
    int dfs(int v, vector<bool>&vis, vector<vector<int>>&adj){
        int cnt = 0;
        int res = 0;
        //Marking vertex v as visited.
        vis[v] = true;
        //Iterating over the adjacent vertices of v.
        for(auto u: adj[v]){
            //If u is not visited, recursively calling dfs on u.
            if(!vis[u]){
                res = dfs(u, vis, adj);
                //If the result from dfs is even, incrementing the answer by 1.
                if(res%2 == 0) ans++;
                else cnt += res;
            }
        }
        //Returning the total count of edges to be removed from the subtree rooted at v.
        return cnt + 1;
    }

    //Function to find the minimum number of edges to be removed to make the graph disconnected.
    int minimumEdgeRemove(int n, vector<vector<int>>edges){
        //Creating a adjacency list representation of the graph.
        vector<vector<int>>adj(n);
        //Creating a visited array to keep track of visited vertices.
        vector<bool>vis(n, false);
        //Filling the adjacency list representation.
        for(auto i: edges){
            adj[i[0]-1].push_back(i[1]-1);
            adj[i[1]-1].push_back(i[0]-1);
        }
        //Calling dfs on the root vertex (0).
        dfs(0, vis, adj);
        //Returning the minimum number of edges to be removed to make the graph disconnected.
        return ans;
    }
};
