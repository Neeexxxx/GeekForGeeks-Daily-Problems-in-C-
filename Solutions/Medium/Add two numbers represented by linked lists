/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    public:
    Node *removeTrailZeroes(Node *num)
    {
        while(num && num->data==0)
        num=num->next;
        
        return num;
    }
    
    Node *reversedList(Node* num)
    {
        Node *n=NULL;
        while(num)
        {
            Node* temp=num->next;
            num->next=n;
            n=num;
            num=temp;
        }
        return n;
    }
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* num1, struct Node* num2)
    {
        // code here
        num1=removeTrailZeroes(num1);
        num2=removeTrailZeroes(num2);
        Node *n1=reversedList(num1),*n2=reversedList(num2);
        
        int carry=0;
        Node *ans=NULL;
        while(n1 && n2)
        {
           int nodeVal=n1->data + n2->data + carry;
           Node *temp=new Node(nodeVal%10); 
           carry=nodeVal/10;
           temp->next=ans;
           ans=temp;
           
           n1=n1->next;
           n2=n2->next;
        }
        
        while(n1)
        {
           int nodeVal=n1->data + carry;
           Node *temp=new Node(nodeVal%10); 
           carry=nodeVal/10;
           temp->next=ans;
           ans=temp;
           
           n1=n1->next;
        }
        
        while(n2)
        {
           int nodeVal=n2->data + carry;
           Node *temp=new Node(nodeVal%10); 
           carry=nodeVal/10;
           temp->next=ans;
           ans=temp;
           
           n2=n2->next;
        }
        while(carry!=0)
        {
           Node *temp=new Node(carry%10); 
           carry=carry/10;
           temp->next=ans;
           ans=temp;
        }
        
        if(ans==NULL)
        return new Node(0);
        return ans;
    }
};
